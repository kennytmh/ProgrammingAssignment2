}
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
length(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete("specdata")
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
cr <- corr("specdata", 400)
summary(cr)
corr <- function(directory, threshold = 0) {
# 1. get the number of complete cases using complete()
x <- complete(directory)
# 2. check to see how many are above the threshold
y <- subset(x, nobs > threshold)
# 3. if any are above the threshold, calculate the correlation
if (nrow(y) > 0) {
z <- lapply(y$id, getmonitor, directory)
# here, not sure how to specify just take nitrate & sulfate but i know they're the
# 2nd and 3rd columns of each data frame, so use an anonymous function to isolate them
test <- lapply(z, function(x) x[,2:3])
# run the the cor function iteratively through each
test2 <- sapply(test, cor, use="complete.obs")
# keep just the rows of the cor function that contain what i need
return(test2[2,])
} else {
test2 <- vector("numeric", length=0)
return(test2)
}
}
summary(cr)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
summary (cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
length(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
summary(cr)
clear
clr
corr <- function(directory, threshold = 0) {
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
corr <- function(directory, threshold = 0) {
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit(ZwD8ReVncb)
submit(kennytmh@gmail.com,ZwD8ReVncb)
submit()
1
2
3
4
5
6
7
8
1: 'pollutantmean' part 1
2: 'pollutantmean' part 2
3: 'pollutantmean' part 3
4: 'pollutantmean' part 4
5: 'complete' part 1
6: 'complete' part 2
7: 'complete' part 3
8: 'corr' part 1
9: 'corr' part 2
10: 'corr' part 3
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
submit()
submit()
pollutantmean <- function(directory, pollutant, id = 1:332) {
id <- as.integer(id)
pollutant <- as.character(pollutant)
directory <- as.character(directory)
x <-c()
for (i in id) {
if (i < 10){
z <-paste("00", i, sep="")
}else if (10 <= i && i < 100){
z <- paste(0, i, sep ="")
}else {
z <- as.character(i)
}
data <- read.csv(paste(z, ".csv", sep =""))
if (pollutant == "sulfate"){
y <- c(data[,2])
} else if (pollutant == "nitrate") {
y <- c(data[,3])
}
x <- c(x, y)
}
mean_data <- mean (x, na.rm = TRUE)
round(mean_data, 3)
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
5+7
x <- 5+7
x
y <- x -3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
v <- z,555,z
v<-c(z,555,z)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
print(my_sqrt)
my_sqrt
mydiv <- my_sqrt(z)
mydiv <- my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my
my_div
getwd()
ls()
x <- 9
ls()
list.files()
help(list.files)
info(list.files)
?list.files
args(list.files)
adsk
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
list.file()
ls()
list.files
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.exists("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
info()
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
ls()
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
delete.file
delete.file("testdir2")
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
getwd()
setwd(old.dir)
unlink.file("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
`:
`:
15:1
?`:`
swq(1,20)
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times - 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Kenny")
my_name <- c(my_char, "Kenny")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("x", "y", "z", sep = " ")
paste(c("x", "y", "z", sep = " ")
paste(c("x", "y", "z", sep = " ")
paste(c("x", "y", "z", sep = " ")
paste(c(1:3), sep = " ")
Paste(1:3, c("x", "y", "z", sep = " ")
Paste(1:3, c("x", "y", "z", sep = "")
Paste(1:3, c("x", "y", "z", sep = "")
Paste(1:3, c("x", "y", "z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
install.packages("swirl")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_na == NA
my_na == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
m=4
library(datasets)
data(iris)
?iris
header(iris)
apply(iris, 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
getwd
getwd()
?mtcars
> library(datasets)
> data(mtcars)
> mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
[1] 126.5779
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
getwd ()
?setwd
setwd(C:\Users\Rachel  Ng\ProgrammingAssignment2)
setwd("C:\Users\Rachel  Ng\ProgrammingAssignment2")
setwd("C:\\Users\Rachel  Ng\ProgrammingAssignment2")
setwd("~ProgrammingAssignment2")
setwd("Users\Rachel  Ng\ProgrammingAssignment2")
setwd("Users\Rachel Ng\ProgrammingAssignment2")
setwd("Users\\Rachel Ng\\ProgrammingAssignment2")
setwd("C:\\Users\\Rachel Ng\\ProgrammingAssignment2")
getwd()
setwd(C:/Users/Rachel Ng/ProgrammingAssignment2)
setwd("C:/Users/Rachel Ng/ProgrammingAssignment2"")
setwd("C:/Users/Rachel Ng/ProgrammingAssignment2)
setwd("C:/Users/Rachel Ng/ProgrammingAssignment2")
?setwd
setwd ("C:/Users/Rachel Ng/ProgrammingAssignment2")
setwd("C:\\Users\\Rachel Ng\\ProgrammingAssignment2")
debug (setwd)
setwd("C:\\Users\\Rachel Ng\\ProgrammingAssignment2")
setwd("C:\\Users\\Rachel Ng\\ProgrammingAssignment2")
DIR <- setwd ("C:\Users\Rachel  Ng\ProgrammingAssignment2")
DIR <- setwd (C:\Users\Rachel  Ng\ProgrammingAssignment2)
DIR <- setwd (//Users/Rachel Ng/ProgrammingAssignment2)
DIR <- setwd (C://Users/Rachel Ng/ProgrammingAssignment2)
DIR <- setwd ("C://Users/Rachel Ng/ProgrammingAssignment2")
DIR <- setwd ("C://Users/Rachel  Ng/ProgrammingAssignment2")
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cachesolve(m)
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
# Most matrix inversion are a costly computation and it is logically better
# to cache the inverse of a matrix rather than compute it repeatedly.
# The following two functions are used to cache the inverse of a matrix.
# makeCacheMatrix creates a list containing a function to
# 1st - To set the value of the matrix
# 2nd - To get the value of the matrix
# 3rd - To set the value of inverse of the matrix
# 4th - To get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If it has, it gets the result and skips the
# computation. If not, it computes the inverse.
# Following which, it will setsthe value in the cache via setinverse function.
# An assumption made is that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
